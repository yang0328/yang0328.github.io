<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sam Yang博客]]></title>
  <link href="http://yang0328.github.io/atom.xml" rel="self"/>
  <link href="http://yang0328.github.io/"/>
  <updated>2015-01-26T03:54:36-05:00</updated>
  <id>http://yang0328.github.io/</id>
  <author>
    <name><![CDATA[Sam Yang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[给rpm包制作签名]]></title>
    <link href="http://yang0328.github.io/blog/2015/01/26/rpm-gpg/"/>
    <updated>2015-01-26T03:37:41-05:00</updated>
    <id>http://yang0328.github.io/blog/2015/01/26/rpm-gpg</id>
    <content type="html"><![CDATA[<p>我们自己制作的rpm包，为了防止被篡改，一般要使用私钥进行签名，然后将公钥广而告之，下载使用软件包的话，可以通过公钥进行验证签名，从而确保文件的原始性。</p>

<h1>1、查询工具包是否安装</h1>

<pre><code>#whereis gpg
gpg: /usr/bin/gpg /usr/share/man/man1/gpg.1.gz
# rpm -qf /usr/bin/gpg
gnupg2-2.0.14-4.el6.x86_64
</code></pre>

<p>得出已经安装，由gnupg管理</p>

<h1>2、自己知道了一个rpm包：qemu-img；还没签名，我们现在安装试试会出现什么</h1>

<pre><code># yum --disablerepo=\* --enablerepo=c6-media install qemu-img
Loaded plugins: fastestmirror, refresh-packagekit
Loading mirror speeds from cached hostfile
 * c6-media:
Setting up Install Process
Resolving Dependencies
--&gt; Running transaction check
---&gt; Package qemu-img.x86_64 2:0.12.1.2-2.113.el6 set to be updated
--&gt; Finished Dependency Resolution

Dependencies Resolved

================================================================================
 Package        Arch         Version                       Repository      Size
================================================================================
Installing:
 qemu-img       x86_64       2:0.12.1.2-2.113.el6          c6-media       343 k

Transaction Summary
================================================================================
Install       1 Package(s)
Upgrade       0 Package(s)

Total download size: 343 k
Installed size: 597 k
Is this ok [y/N]: y
Downloading Packages:


Package qemu-img-0.12.1.2-2.113.el6.x86_64.rpm is not signed
</code></pre>

<p>对，就是报此rpm包没有签名；解决方法有，修改/etc/yum.repos.d/CentOS-Media.repo中gpgcheck=0不验证包，但这不是我们要的结果</p>

<h1>3、查询系统是否包含gpg key</h1>

<pre><code># gpg --list-key
</code></pre>

<p>没有任何输出</p>

<h1>4、正式开始签名</h1>

<pre><code># gpg --gen-key
gpg (GnuPG) 2.0.14; Copyright (C) 2009 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

gpg: keyring `/root/.gnupg/secring.gpg' created
Please select what kind of key you want:
(1) RSA and RSA (default)
(2) DSA and Elgamal
(3) DSA (sign only)
(4) RSA (sign only)
Your selection? 4                                       #RSA比较流行
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048)                        #直接回车
Requested keysize is 2048 bits
Please specify how long the key should be valid.
     0 = key does not expire
   = key expires in n days
  w = key expires in n weeks
  m = key expires in n months
  y = key expires in n years
Key is valid for? (0)                                    #0代表永不过期
Key does not expire at all
Is this correct? (y/N) y                                 #确认

GnuPG needs to construct a user ID to identify your key.

Real name: ecdata                                        #姓名
Email address: qiujichun@gmail.com                       #邮箱
Comment: custom                                          #注释
You selected this USER-ID:
"ecdata (custom) "

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O    #大些字母O，确认

                                   lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk
                                   x Enter passphrase                                    x
                                   x                                                     x
                                   x                                                     x
                                   x Passphrase ***********_____________________________ x输入密码
                                   x                                                     x
                                   x                                       x
                                   mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj


                                   lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk
                                   x Please re-enter this passphrase                     x
                                   x                                                     x
                                   x Passphrase ***********_____________________________ x再次输入
                                   x                                                     x
                                   x                                       x
                                   mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj



can't connect to `/root/.gnupg/S.gpg-agent': No such file or directory
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.

此时应该多移动鼠标、敲键盘，生成足够多的随机数，或直接另一终端执行du /等命令
gpg: key 8CD0BA9F marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
pub   2048R/8CD0BA9F 2011-12-21
  Key fingerprint = 6245 8B36 E982 2920 1A54  BA1C 10DE 1087 8CD0 BA9F
uid                  ecdata (custom)

Note that this key cannot be used for encryption.  You may want to use
the command "--edit-key" to generate a subkey for this purpose.
可以了，此时可能需要添加个“subkey”

# gpg --edit-key ecdata    此为刚key的name
Command&gt; help   查询到用addkey命令
    addkey      add a subkey
Command&gt; addkey
                    lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk
                    x Please enter the passphrase to unlock the secret key for the OpenPGP certificate:  x
                    x "ecdata (custom) "                                            x
                    x 2048-bit RSA key, ID 8CD0BA9F,                                                     x
                    x created 2011-12-21.                                                                x
                    x                                                                                    x
                    x                                                                                    x
                    x Passphrase ***********____________________________________________________________ x
                    x                                                                                    x
                    x                                                                        x
                    mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj此为以后解刚secret key所用

Please select what kind of key you want:
(3) DSA (sign only)
(4) RSA (sign only)
(5) Elgamal (encrypt only)
(6) RSA (encrypt only)
Your selection? 6
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048)
Requested keysize is 2048 bits
Please specify how long the key should be valid.
     0 = key does not expire
   = key expires in n days
  w = key expires in n weeks
  m = key expires in n months
  y = key expires in n years
Key is valid for? (0) 0
Key does not expire at all
Is this correct? (y/N) y
Really create? (y/N) y
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.

---------------------疯狂移动鼠标吧（如果嫌烦，直接循环代劳 # for (( a=1;a&lt;=1000;a++ ));do du /;done ）
pub  2048R/8CD0BA9F  created: 2011-12-21  expires: never       usage: SC
                 trust: ultimate      validity: ultimate
sub  2048R/1E6D98D0  created: 2011-12-21  expires: never       usage: E
[ultimate] (1). ecdata (custom)
Command&gt; save
</code></pre>

<p>可以了</p>

<h1>5、查看下成果</h1>

<pre><code># gpg --list-key
/root/.gnupg/pubring.gpg
------------------------
pub   2048R/8CD0BA9F 2011-12-21
uid                  ecdata (custom)
sub   2048R/1E6D98D0 2011-12-21
</code></pre>

<h1>6、修改rpm宏，使用我们的密钥对：</h1>

<pre><code># echo %_signature gpg &gt;&gt; ~/.rpmmacros
# echo "%_gpg_name ecdata (custom)" &gt;&gt; ~/.rpmmacros
</code></pre>

<h1>7、对已有rpm软件包进行签名：</h1>

<pre><code># rpm --addsign /media/CentOS/Packages/qemu-img-0.12.1.2-2.113.el6.x86_64.rpm
Enter pass phrase:                输入刚制作密钥对的密码
Pass phrase is good.
/media/CentOS/Packages/qemu-img-0.12.1.2-2.113.el6.x86_64.rpm:

+++++++++在rpmbuild打包时签名：

# rpmbuild --sign --ta hello-0.1-1.tar.gz
+++++++++
</code></pre>

<h1>8、我们先将gpg产生的公钥导出到一个文件，然后将这个公钥文件导入到RPM数据库里，然后使用rpm命令进行检验。</h1>

<p>如果不先导入到rpm数据库，验证结果是这样的
    # rpm -K /media/CentOS/Packages/qemu-img-0.12.1.2-2.113.el6.x86_64.rpm
    /media/CentOS/Packages/qemu-img-0.12.1.2-2.113.el6.x86_64.rpm: RSA sha1 ((MD5) PGP) md5 NOT OK (MISSING KEYS: (MD5) PGP#8cd0ba9f)</p>

<p>导出公钥到一个文本文档：
    # gpg &ndash;export -a &ldquo;ecdata (custom)&rdquo; > RPM-GPG-KEY-ECDATA</p>

<p>查看rpm数据库中已有的公钥：</p>

<pre><code># rpm -q gpg-pubkey-*
package gpg-pubkey-* is not installed
# rpm --import RPM-GPG-KEY-ECDATA
# rpm -q gpg-pubkey-*
gpg-pubkey-8cd0ba9f-4ef12761    这是上步导入的
</code></pre>

<p>现在再来验证下RPM包
    # rpm -K /media/CentOS/Packages/qemu-img-0.12.1.2-2.113.el6.x86_64.rpm
    /media/CentOS/Packages/qemu-img-0.12.1.2-2.113.el6.x86_64.rpm: rsa sha1 (md5) pgp md5 OK</p>

<h1>9、安装</h1>

<pre><code># rpm -ivh Packages/qemu-img-0.12.1.2-2.113.el6.x86_64.rpm
Preparing...                ########################################### [100%]
1:qemu-img               ########################################### [100%]
没有报类似警告
warning: qemu-img-0.12.1.2-2.113.el6.x86_64.rpm: Header V3 RSA/SHA1 signature: NOKEY, key ID c0eb63c7 
</code></pre>

<p>但是此时yum安装还不行，继续（注意顺序）
    # cp RPM-GPG-KEY-ECDATA /etc/pki/rpm-gpg/</p>

<pre><code># createrepo -g repodata/comps.xml .

# cat /etc/yum.repos.d/CentOS-Media.repo  添加修改如下
............................
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
   file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ECDATA

# yum clean all

# yum --disablerepo=\* --enablerepo=c6-media install qemu-img
Loaded plugins: fastestmirror, refresh-packagekit
Determining fastest mirrors
* c6-media:
c6-media                                                                                                       | 1.9 kB     00:00 ...
c6-media/primary                                                                                               | 1.7 MB     00:00 ...
c6-media                                                                                                                    3696/3696
Setting up Install Process
Resolving Dependencies
--&gt; Running transaction check
---&gt; Package qemu-img.x86_64 2:0.12.1.2-2.113.el6 set to be updated
--&gt; Finished Dependency Resolution

Dependencies Resolved

======================================================================================================================================
 Package                      Arch                       Version                                   Repository                    Size
======================================================================================================================================
Installing:
 qemu-img                     x86_64                     2:0.12.1.2-2.113.el6                      c6-media                     344 k

Transaction Summary
===========================================================================================================================
Install       1 Package(s)
Upgrade       0 Package(s)

Total download size: 344 k
Installed size: 597 k
Is this ok [y/N]: y
Downloading Packages:
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing     : 2:qemu-img-0.12.1.2-2.113.el6.x86_64                                                                           1/1

Installed:
  qemu-img.x86_64 2:0.12.1.2-2.113.el6

Complete!
</code></pre>

<p>完成</p>

<h1>10、对其他自定义的rpm继续签名</h1>

<pre><code># rpm --resign Packages/qemu-kvm-0.12.1.2-2.113.el6.x86_64.rpm
再次（必须）
# createrepo -g repodata/comps.xml .
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitlab迁移]]></title>
    <link href="http://yang0328.github.io/blog/2014/12/20/gitlab-migration/"/>
    <updated>2014-12-20T14:44:40-05:00</updated>
    <id>http://yang0328.github.io/blog/2014/12/20/gitlab-migration</id>
    <content type="html"><![CDATA[<p>gitlab 从 A 服务器迁移至 B 服务器</p>

<h2>一、在B服务器上部署gitlab环境</h2>

<p>可参考gitlab官方的安装教程，上面介绍的已经很详细，在这里就不多说了</p>

<h2>二、打包A服务器上的数据</h2>

<pre><code>cd /home/git/
tar zcvf /bk/repositories.tar.gz ./repositories   #打包仓库文件
mysqldump -uroot -pxxxx gitlabhq_production &gt; /bk/gitlabhq_production.sql  #备份sql文件
cp /home/git/.ssh/authorized_keys  /bk/authorized_keys #备份keys

cd /bk
scp repositories.tar.gz  gitlabhq_production.sql  authorized_keys root@B:/bk/ #复制到B服务器的/bk目录下
</code></pre>

<p>在B服务器上导入数据</p>

<pre><code>cd /bk/
tar zxvf repositories.tar.gz
/bin/cp -r repositories /home/git/  #导入仓库
chown -R git.git /home/git/repositories/ #授权
cat authorized_keys &gt;&gt; /home/git/.ssh/authorized_keys #导入keys
mysql -uroot -pxxx gitlabhq_production &lt; gitlabhq_production.sql #导入数据库

cd /home/git/gitlab/
sudo -u git -H bundle exec rake gitlab:import:repos RAILS_ENV=production
sudo -u git -H bundle exec rake gitlab:satellites:create RAILS_ENV=production
sudo chmod -R ug+rwX,o-rwx /home/git/repositories/
sudo chmod -R ug-s /home/git/repositories/
find /home/git/repositories/ -type d -print0 | sudo xargs -0 chmod g+s
</code></pre>

<p>检测</p>

<pre><code>sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production
</code></pre>

<p>检测没有问题的话就可以重启下gitlab，然后打开看看数据什么的都有了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git分支管理]]></title>
    <link href="http://yang0328.github.io/blog/2014/12/20/my-first-blog/"/>
    <updated>2014-12-20T05:53:12-05:00</updated>
    <id>http://yang0328.github.io/blog/2014/12/20/my-first-blog</id>
    <content type="html"><![CDATA[<h2>一、主分支Master</h2>

<pre><code>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。
Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。
</code></pre>

<h2>二、开发分支Develop</h2>

<pre><code>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。 
这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在Master分支上，对Develop分支进行"合并"（merge）。
Git创建Develop分支的命令：
git checkout -b develop
一个项目可能涉及到多人在同时开发，每个人可以形成一个分支，日常开发在自己的分支上开发，开发完成后合并到主develop分支，分支命名规则为姓名-develop，例如
git checkout -b sam-develop
将个人分支发布到develop主分支命令：
切换到develop分支
git checkout develop
对Develop分支进行合并
git merge --no-ff sam-develop
将Develop分支发布到Master分支的命令：
切换到Master分支
git checkout master
对Develop分支进行合并
git merge --no-ff develop

这里稍微解释一下，上一条命令的--no-ff参数是什么意思。默认情况下，Git执行"快进式合并"（fast-farward merge），会直接将Master分支指向Develop分支。
使用--no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，我们希望采用这种做法。关于合并的更多解释，请参考Benjamin Sandofsky的《Understanding the Git Workflow》 。
</code></pre>

<h2>三、临时性分支</h2>

<pre><code>前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。
但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：
*功能（feature）分支
*预发布（release）分支
*修补bug（fixbug）分支
这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。
</code></pre>

<h2>四、功能分支</h2>

<pre><code>接下来，一个个来看这三种"临时性分支"。
第一种是功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。
功能分支的名字，可以采用feature-*的形式命名。
创建一个功能分支：
git checkout -b feature-x
开发完成后，将功能分支合并到develop分支：
git checkout develop
git merge --no-ff feature-x
删除feature分支：
git branch -d feature-x
</code></pre>

<h2>五、预发布分支</h2>

<pre><code>第二种是预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。
预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。
创建一个预发布分支：
git checkout -b release-3.0
确认没有问题后，合并到master分支：
git checkout master
git merge --no-ff release-3.0
对合并生成的新节点，做一个标签
git tag -a 3.0
再合并到develop分支：
git checkout develop
git merge --no-ff release-3.0
最后，删除预发布分支：
git branch -d release-3.0
</code></pre>

<h2>六、修补bug分支</h2>

<pre><code>最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。
修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。
创建一个修补bug分支：
git checkout -b fixbug-0.1
修补结束后，合并到master分支：
git checkout master
git merge --no-ff fixbug-0.1
git tag -a 0.1.1
再合并到develop分支：
git checkout develop
git merge --no-ff fixbug-0.1
最后，删除"修补bug分支"：
git branch -d fixbug-0.1
</code></pre>
]]></content>
  </entry>
  
</feed>
